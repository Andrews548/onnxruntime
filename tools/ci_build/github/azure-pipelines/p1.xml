jobs:
- job: 'build'
  pool:
    vmImage: 'windows-latest'
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfig: 'Debug'
        VcDllPath: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\14.23.27820\debug_nonredist\x64\Microsoft.VC142.DebugCRT'
      release:
        BuildConfig: 'RelWithDebInfo'
        VcDllPath: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\14.23.27820\x64\Microsoft.VC142.CRT'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-detailedsummary -maxcpucount -consoleloggerparameters:PerformanceSummary'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
  timeoutInMinutes: 120
  workspace:
    clean: all
  steps:    
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: 'x64'

  - task: CopyFiles@2
    displayName: 'Copy VC DLLs to: $(Build.ArtifactStagingDirectory)'
    inputs:
      sourceFolder: $(VcDllPath)
      Contents: |
       **\*.dll
      TargetFolder: $(Build.ArtifactStagingDirectory)\$(BuildConfig)

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --build_wheel --use_mkldnn'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: $(BuildConfig)        
      arguments: '--configuration $(BuildConfig) -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      
  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: 'x64'
      configuration: $(BuildConfig)
      msbuildArgs: $(MsbuildArguments)
      msbuildArchitecture: 'x64'
      maximumCpuCount: true
      logProjectEvents: false
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      sourceFolder: $(Build.BinariesDirectory)\$(BuildConfig)
      Contents: |
       $(BuildConfig)\*.exe
       $(BuildConfig)\*.dll
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Pipeline Artifact'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: succeeded()

- job: 'test'
  dependsOn: 'build'
  pool: 'Win-CPU'
  timeoutInMinutes: 120
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  workspace:
    clean: all      
  steps:
  - template: templates/set-test-data-variables-step.yml
  - template: templates/windows-build-tools-setup-steps.yml
    parameters:
      EnvSetupScript: setup_env.bat
      buildArch: x64
      setVcvars: true  
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact'
    inputs:
      targetPath: '$(Build.BinariesDirectory)'

  - script: |
     move build.debug Debug
     move build.release RelWithDebInfo
   
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Command Line Script'

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: 'RelWithDebInfo'
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'      

  - task: DotNetCoreCLI@2
    displayName: 'Test C# RelWithDebInfo'
    inputs:
      command: test
      projects: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests\Microsoft.ML.OnnxRuntime.Tests.csproj'
      configuration: 'RelWithDebInfo'          
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: succeeded()      