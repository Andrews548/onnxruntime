jobs:

- job: 'test'
  pool: 'Win-CPU-2019'
  timeoutInMinutes: 120
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    EnvSetupScript: setup_env.bat
    buildArch: x64
    setVcvars: true
  workspace:
    clean: all      
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact'
    inputs:
      buildType: specific
      project: '$(System.TeamProjectId)'
      definition: 82
      pipelineId: 98837
      buildVersionToDownload: 'specific'
      targetPath: '$(Build.BinariesDirectory)'

  - script: |
     move build.debug Debug
     move build.release RelWithDebInfo
   
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Command Line Script'
   
  - template: templates/set-test-data-variables-step.yml

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 4.9
    inputs:
      versionSpec: 4.9.4

  - task: PowerShell@2
    displayName: 'Download AzCopy (used for download test data script)'
    inputs:
      targetType: 'inline'
      script: |
        Invoke-WebRequest -OutFile $(Build.BinariesDirectory)\azcopy.exe https://onnxruntimetestdata.blob.core.windows.net/models/azcopy.exe

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     python -m pip install -q  pyopenssl setuptools wheel numpy     
   
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'        

  - task: PythonScript@0
    displayName: 'Download test data'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
      arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
      pythonInterpreter: '$(Build.BinariesDirectory)\packages\python\python.exe'
      workingDirectory: $(Build.BinariesDirectory)

  - task: CmdLine@1
    continueOnError: true
    displayName: 'Run OpenCPPCoverage installer'
    inputs:
      filename: '$(Build.BinariesDirectory)\installer\opencppcoverage\installer.exe'
      arguments: '/SP- /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /DIR="$(Build.BinariesDirectory)\OpenCppCoverage"'  
        
  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: 'RelWithDebInfo'
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'      

  - task: DotNetCoreCLI@2
    displayName: 'Test C# RelWithDebInfo'
    inputs:
      command: test
      projects: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests\Microsoft.ML.OnnxRuntime.Tests.csproj'
      configuration: 'RelWithDebInfo'          
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - script: |
     onnx_test_runner.exe -j 2 $(Build.BinariesDirectory)\models
   
    workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
    displayName: 'Run model test'

  - script: |
     onnx_test_runner.exe -e mkldnn -c 1 -j 1 $(Build.BinariesDirectory)\models
   
    workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
    displayName: 'Run model test'
    
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: succeeded()      